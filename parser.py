import asyncio
import re
import sqlite3
import os
import logging
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityUrl
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from pymorphy2 import MorphAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ NLP —Ä–µ—Å—É—Ä—Å–æ–≤
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
morph = MorphAnalyzer()
russian_stopwords = stopwords.words('russian')
client = TelegramClient('news_parser', API_ID, API_HASH).start(bot_token=BOT_TOKEN)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('news_bot.db')
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (
                     user_id
                     INTEGER
                     PRIMARY
                     KEY,
                     created_at
                     TIMESTAMP
                     DEFAULT
                     CURRENT_TIMESTAMP
                 )''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS channels
    (
        id
        INTEGER
        PRIMARY
        KEY
        AUTOINCREMENT,
        url
        TEXT
        NOT
        NULL
        UNIQUE,
        user_id
        INTEGER
        NOT
        NULL,
        last_parsed_id
        INTEGER
        DEFAULT
        0,
        FOREIGN
        KEY
                 (
        user_id
                 ) REFERENCES users
                 (
                     user_id
                 )
        )''')

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 10 –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('''
              CREATE TRIGGER IF NOT EXISTS channel_limit
        BEFORE INSERT ON channels
        FOR EACH ROW
        WHEN (SELECT COUNT(*) FROM channels WHERE user_id = NEW.user_id) >= 10
              BEGIN
              SELECT RAISE(ABORT, 'Channel limit reached');
              END;
              ''')

    conn.commit()
    return conn


db = init_db()


# –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    text = re.sub(r'http\S+', '', text)  # –°—Å—ã–ª–∫–∏
    text = re.sub(r'@\w+', '', text)  # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
    text = re.sub(r'#\w+', '', text)  # –•–µ—à—Ç–µ–≥–∏
    text = re.sub(r'–†–µ–∫–ª–∞–º–∞:.*', '', text, flags=re.IGNORECASE)  # –†–µ–∫–ª–∞–º–∞
    return text.strip()


# –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def simplify_text(text):
    tokens = word_tokenize(text, language="russian")
    cleaned_tokens = [
        morph.parse(token)[0].normal_form
        for token in tokens
        if token.isalnum() and token not in russian_stopwords
    ]
    return ' '.join(cleaned_tokens)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    try:
        c = db.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        db.commit()

        await event.reply(
            "üì∞ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
            "–î–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "/add https://t.me/example\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:\n"
            "/list - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
            "/remove - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n\n"
            "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await event.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@client.on(events.NewMessage(pattern='/add'))
async def add_channel(event):
    user_id = event.sender_id
    try:
        match = re.search(r'https://t\.me/\w+', event.text)
        if not match:
            await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /add https://t.me/example")
            return

        url = match.group(0)
        c = db.cursor()

        try:
            c.execute("INSERT INTO channels (url, user_id) VALUES (?, ?)", (url, user_id))
            db.commit()
            await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª {url} –¥–æ–±–∞–≤–ª–µ–Ω!")
        except sqlite3.IntegrityError:
            await event.reply("‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
        except sqlite3.OperationalError as e:
            if "channel_limit" in str(e):
                await event.reply("üö´ –õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ 10 –∫–∞–Ω–∞–ª–æ–≤")
            else:
                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /add: {e}")
        await event.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")


@client.on(events.NewMessage(pattern='/remove'))
async def remove_channel(event):
    user_id = event.sender_id
    try:
        match = re.search(r'https://t\.me/\w+', event.text)
        if not match:
            await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /remove https://t.me/example")
            return

        url = match.group(0)
        c = db.cursor()
        c.execute("DELETE FROM channels WHERE url = ? AND user_id = ?", (url, user_id))
        db.commit()

        if c.rowcount > 0:
            await event.reply(f"üóë –ö–∞–Ω–∞–ª {url} —É–¥–∞–ª–µ–Ω")
        else:
            await event.reply("‚ÑπÔ∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /remove: {e}")
        await event.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")


@client.on(events.NewMessage(pattern='/list'))
async def list_channels(event):
    user_id = event.sender_id
    try:
        c = db.cursor()
        c.execute("SELECT url FROM channels WHERE user_id = ?", (user_id,))
        channels = c.fetchall()

        if not channels:
            await event.reply("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return

        response = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + "\n".join([f"‚Ä¢ {ch[0]}" for ch in channels])
        await event.reply(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /list: {e}")
        await event.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")


# –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
async def parse_channels():
    while True:
        try:
            c = db.cursor()
            c.execute("SELECT url, user_id, last_parsed_id FROM channels")
            channels = c.fetchall()

            for url, user_id, last_parsed_id in channels:
                try:
                    entity = await client.get_entity(url)
                    messages = await client.get_messages(entity, limit=5, min_id=last_parsed_id)

                    if not messages:
                        continue

                    new_last_id = max(m.id for m in messages)

                    for message in messages:
                        if message.id <= last_parsed_id or not message.text:
                            continue

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                        cleaned_text = clean_text(message.text)
                        simplified_text = simplify_text(cleaned_text)

                        if not simplified_text:
                            continue

                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                        response = (
                            f"üì∞ [–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å]\n"
                            f"‚ûñ‚ûñ‚ûñ\n"
                            f"{simplified_text}\n"
                            f"‚ûñ‚ûñ‚ûñ\n"
                            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {entity.title}"
                        )

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await client.send_message(
                            user_id,
                            response,
                            buttons=[
                                [{"text": "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "data": "publish"}],
                                [{"text": "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "data": "skip"}]
                            ]
                        )

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
                        c.execute(
                            "UPDATE channels SET last_parsed_id = ? WHERE url = ?",
                            (new_last_id, url)
                        )
                        db.commit()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")

            await asyncio.sleep(CHECK_INTERVAL)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            await asyncio.sleep(60)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@client.on(events.CallbackQuery)
async def handle_buttons(event):
    try:
        if event.data == b'publish':
            await event.answer("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        elif event.data == b'skip':
            await event.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")


# –ó–∞–ø—É—Å–∫
async def main():
    await client.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(parse_channels())
    await client.run_until_disconnected()


if __name__ == '__main__':
    asyncio.run(main())